<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on daelon.net</title><link>https://daelon.net/tags/python/</link><description>Recent content in Python on daelon.net</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 06 Apr 2024 17:09:32 -0400</lastBuildDate><atom:link href="https://daelon.net/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Code Generation Case Study: Firmware Configuration</title><link>https://daelon.net/posts/codegen1/</link><pubDate>Sat, 06 Apr 2024 17:09:32 -0400</pubDate><guid>https://daelon.net/posts/codegen1/</guid><description>This article is part 1 in a series exploring code generation systems.
Case Study: Firmware Configuration Case Study: Message Decoding (coming soon) Configuration management in embedded systems is a difficult problem. The projects are often resource contrained, and the languages and tools are&amp;hellip; not usually modern. It&amp;rsquo;s rather common to have a series of products built on a common platform (same microcontroller(MCU), shared libraries), but different hardware configurations. Sharing code between projects is a valuable time/effort saver, but it&amp;rsquo;s non-trivial to correctly abstract away model-specific details like the exact layout of the MCU&amp;rsquo;s pins.</description></item></channel></rss>